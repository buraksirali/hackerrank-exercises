-- Asian Population --
SELECT SUM(CITY.POPULATION) FROM CITY, COUNTRY WHERE CITY.COUNTRYCODE = COUNTRY.CODE AND COUNTRY.CONTINENT = 'ASIA';

-- African Cities --
SELECT City.Name FROM CITY, COUNTRY WHERE CITY.COUNTRYCODE = COUNTRY.CODE AND COUNTRY.CONTINENT = 'Africa';

-- Average Population of Each Continent --
SELECT COUNTRY.CONTINENT, ROUND(AVG(CITY.POPULATION), 0) FROM CITY, COUNTRY
WHERE CITY.COUNTRYCODE = COUNTRY.CODE GROUP BY COUNTRY.CONTINENT;

-- The Report --
SELECT IIF(GRADE < 8, NULL, NAME), GRADE, MARKS
FROM STUDENTS JOIN GRADES 
ON (MARKS BETWEEN MIN_MARK AND MAX_MARK)
ORDER BY GRADE DESC, NAME;

-- Full Score --
SELECT HACKERS.HACKER_ID, NAME
FROM SUBMISSIONS, CHALLENGES, DIFFICULTY, HACKERS
WHERE SUBMISSIONS.CHALLENGE_ID = CHALLENGES.CHALLENGE_ID AND
      DIFFICULTY.DIFFICULTY_LEVEL = CHALLENGES.DIFFICULTY_LEVEL AND
      HACKERS.HACKER_ID = SUBMISSIONS.HACKER_ID AND
      SUBMISSIONS.SCORE = DIFFICULTY.SCORE
GROUP BY HACKERS.HACKER_ID, NAME HAVING COUNT(HACKERS.HACKER_ID) > 1
ORDER BY COUNT(HACKERS.HACKER_ID) DESC, HACKERS.HACKER_ID;

-- Challenges --
SELECT HACKERS.HACKER_ID, NAME, COUNT(HACKERS.HACKER_ID) AS CHALLENGES_CREATED
INTO OUTPUT_TABLE
FROM HACKERS, CHALLENGES
WHERE CHALLENGES.HACKER_ID = HACKERS.HACKER_ID
GROUP BY HACKERS.HACKER_ID, NAME;

DECLARE @challenge_amount AS INTEGER = (SELECT MAX(CHALLENGES_CREATED) FROM OUTPUT_TABLE);

SELECT * FROM OUTPUT_TABLE WHERE CHALLENGES_CREATED = @challenge_amount OR 
CHALLENGES_CREATED IN
    (SELECT CHALLENGES_CREATED FROM OUTPUT_TABLE
     GROUP BY CHALLENGES_CREATED
     HAVING COUNT(CHALLENGES_CREATED) = 1)
ORDER BY CHALLENGES_CREATED DESC, HACKER_ID;

-- Harry Potter and Wands --
SELECT ID, AGE, COINS_NEEDED, POWER
FROM 
(
    SELECT W.ID, WP.AGE, W.COINS_NEEDED, W.POWER,
    ROW_NUMBER() OVER 
        (
            PARTITION BY W.CODE, W.POWER  
            ORDER BY W.COINS_NEEDED, W.POWER DESC
        ) AS RowNumber
    FROM WANDS W WITH (NOLOCK), WANDS_PROPERTY WP WITH (NOLOCK)
    WHERE W.CODE = WP.CODE AND WP.IS_EVIL = 0
) AS WAND_DATA
WHERE RowNumber = 1
ORDER BY power DESC, age DESC

-- Contest Leaderboard --
SELECT HACKER_ID, CHALLENGE_ID, MAX(SCORE) AS MAX_SCORE INTO CHALLENGES_BY_HACKERS
FROM SUBMISSIONS
GROUP BY CHALLENGE_ID, HACKER_ID;

SELECT HACKER_ID, SUM(MAX_SCORE) AS TOTAL_SCORE INTO CHALLENGES_TOTAL_SCORES
FROM CHALLENGES_BY_HACKERS
GROUP BY HACKER_ID;

SELECT C.HACKER_ID, NAME, TOTAL_SCORE
FROM CHALLENGES_TOTAL_SCORES C WITH (NOLOCK), HACKERS H WITH (NOLOCK)
WHERE C.HACKER_ID = H.HACKER_ID AND TOTAL_SCORE != 0
ORDER BY TOTAL_SCORE DESC, C.HACKER_ID;